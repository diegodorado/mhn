{"version":3,"sources":["webpack:///./src/templates/category.js"],"names":["Template","pageContext","data","post","markdownRemark","posts","allMarkdownRemark","frontmatter","category","title","overview","previous","next","images","edges","map","e","node","reduce","a","concat","console","log","slides","i","key","draggable","fluid","file","childImageSharp","alt","epigraph","bodyClass","className","to","style","width","overflow","activeDotColor","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"2FAAA,2JAgDeA,UAvCE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KACNC,EAAmCD,EAAnDE,eAAyCC,EAAUH,EAA7BI,kBADU,EAEFH,EAAKI,YAAnCC,EAFgC,EAEhCA,SAAUC,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,SAClBC,EAAmBV,EAAnBU,SAAUC,EAASX,EAATW,KAEXC,EAASR,EAAMS,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAKV,YAAYM,UAAQK,QAAO,SAACC,EAAEH,GAAH,OAASG,EAAEC,OAAOJ,KAAK,IAC7FK,QAAQC,IAAIT,GACZ,IAAMU,EAASV,EAAOE,KAAK,SAAAS,GAAC,OAAI,kBAAC,IAAD,CAAKC,IAAKD,EAAIE,WAAW,EAAQC,MAAOH,EAAEI,KAAKC,gBAAgBF,MAAOG,IAAKN,EAAEM,IAAKC,SAAUP,EAAEO,cAE9H,OACA,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAAC,IAAD,CAAKvB,MAAOA,IAEZ,yBAAKwB,UAAU,kBACZtB,EAAW,kBAAC,OAAD,CAAMuB,GAAIvB,IAAe,+BACrC,4BAAKH,GACJI,EAAO,kBAAC,OAAD,CAAMsB,GAAItB,IAAW,gCAG/B,yBAAKqB,UAAU,gBACZtB,EAAW,kBAAC,OAAD,CAAMuB,GAAIvB,IAAe,+BACrC,6BACCC,EAAO,kBAAC,OAAD,CAAMsB,GAAItB,IAAW,gCAG/B,yBAAKuB,MAAO,CAACC,MAAM,OAAQC,SAAU,WACnC,kBAAC,IAAD,CAAYd,OAAQA,EAAQe,eAAgB,aAG9C,uBAAGL,UAAU,YAAYvB,GAEzB,yBACEuB,UAAU,eACVM,wBAAyB,CAAEC,OAAQrC,EAAKsC,UAQvC,IAAMC,EAAS","file":"component---src-templates-category-js-95a5c489e60be4e54257.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Img from \"gatsby-image\"\nimport Surprise from \"../assets/caja-sorpresa.svg\"\nimport ZoomSlider from \"../components/slider/Slider\"\n\n\nconst Template = ({pageContext, data}) => {\n  const { markdownRemark: post, allMarkdownRemark: posts } = data\n  const { category, title, overview } = post.frontmatter\n  const {previous, next } = pageContext\n  // join all images\n  const images = posts.edges.map(e => e.node.frontmatter.images).reduce((a,e) => a.concat(e) , [])\n  console.log(images)\n  const slides = images.map( i => <Img key={i}  draggable={false}  fluid={i.file.childImageSharp.fluid} alt={i.alt} epigraph={i.epigraph} />)\n\n  return (\n  <Layout bodyClass=\"level1\">\n    <SEO title={title} />\n\n    <nav className=\"pager category\">\n      {previous ? <Link to={previous} /> : <span/>}\n      <h2>{category}</h2>\n      {next ? <Link to={next} /> : <span/>}\n    </nav>\n    \n    <nav className=\"pager object\"> \n      {previous ? <Link to={previous} /> : <span/>}\n      <h3></h3>\n      {next ? <Link to={next} /> : <span/>}\n    </nav>\n    \n    <div style={{width:'100%', overflow: 'hidden'}}>\n      <ZoomSlider slides={slides} activeDotColor={\"#006699\"}/>\n    </div>\n\n    <p className=\"overview\">{overview}</p>\n\n    <div\n      className=\"post-content\"\n      dangerouslySetInnerHTML={{ __html: post.html }}\n    />\n\n  </Layout>)\n}\n\nexport default Template\n\nexport const pageQuery = graphql`\n  query PostsBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        category\n        overview\n      }\n    }\n    allMarkdownRemark(sort: {order: ASC, fields: frontmatter___index}, filter: {fields: {slug: {regex: $slug, ne: $slug}}}) {\n      edges {\n        node {\n          frontmatter {\n            images {\n              alt\n              epigraph\n              file{ \n                childImageSharp {\n                  fluid(maxWidth: 1920, quality: 90) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}